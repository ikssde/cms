Title: Programmer's Guide

----

The Programmer's Guide for OPT shows, how to use Open Power Template 2 library from the script-side. You can read these chapters from start to finish to get to know dozens of practical and helpful issues. Before we start, let us introduce the main concepts of OPT Application Programming Interface.

The structure of OPT
====================

Open Power Template 2 is a part of *Open Power Libs 2* family (currently its only quite mature member). In order to provide a friendly cooperation between the libraries, they share a common core that provides the basic interfaces and features, such as autoloading, plugin system and error handling. When we talk about Open Power Template 2 API source code, we always mean the source code *together with the OPL core*.

It does not mean that you have to visit the Invenzzia website again and download another package. The core is already included in the installation package of OPT and all you have to do is to copy the files to your project directory structure.

In this guide, we will sometimes refer to the OPL core, explaining OPT-specific issues and the basic usage, however for the detailed information, you should also read the *OPL User Manual*.

How does OPT work?
==================

Open Power Template 2 is a template engine that provides its own templating language instead of using plain PHP. Because of the performance reasons, the XML templates are not parsed and executed directly by OPT. Instead, the library uses a small trick. If it notices that a certain template is used for the first time or it has been modified, it compiles it into plain and simple PHP script and saves the result on the hard drive. Then, the library simply includes the compiled file and lets the PHP parser do the rest.

The compilation requires a significant amount of work to be done, so the library consists of two, partially independent parts:

1. The front-end - manages the script data and executes PHP templates.
2. The compiler - compiles the XML templates to the PHP code.

The front-end is quite small, and moreover - OPL core automatically loads most of the code on demand, so that your script is not overloaded by the template compiler or exception handler if it is not used.

System requirements
===================

As it was said in the installation chapter, Open Power Template 2 was written for PHP 5.3. However, because this version has not been released yet, the OPL core provides a compatibility layer for PHP 5.2 that adds the missing classes and interfaces. It is automatically loaded, if the system requirements are not satisfied. Of course, the compatibility layer generates a small slowdown, but there is nothing to worry about. The extra classes and interfaces are used by the template compiler, not the front-end.

OPT versus other template engines
=================================

The standalone template engines available on the Internet, like Smarty, usually have a simple Application Programming Interface that consists of one general-purpose class. It is very simple in use, especially in smaller projects or for people that are not familiar with the object-oriented programming, but causes many problems if we are going to work with frameworks and bigger applications. On the other side, we have the template engines that are parts of popular frameworks, with nice, objective design. The OPT API resembles the framework solutions, providing several specialized classes that perform certain tasks and must be combined together in order to execute a template. If you are familiar with the first concept, this may be a bit confusing to you at the beginning, but once you master it, you will see that it is much more intuitive and powerful.